*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

#main-grid-wrapper{
    display: grid;
    /* grid-template-rows: 60px 360px 100vh 180px;
    grid-template-columns: 320px 1fr;   */
    grid-template:  
        "header header" 60px
        "banner banner "360px
        "aside main" 1fr
        "footer footer" 180px
        / 320px 1fr
    ;
}

#main-header {
    background-color: rgb(221, 85, 85);
    /* grid-column: 1 / 3; */
    grid-area: header;
}
#main-banner-wrapper {
    background-color: aqua;
    /* grid-column: 1 / 3; */
    grid-area: banner;
}

#main-banner-container{
    width: 1080px;
    height: 100%;
    margin: 0 auto;
    background-color: rgb(131, 131, 245);
    display: grid;
    grid-template-rows: 360px;
    grid-template-columns: repeat( 4, 1080px );
    overflow: hidden;

}


#main-container-side {
    background-color: rgb(125, 194, 98);
    grid-area: aside;
}
#main-container {
    background-color: yellow;
    display: grid;
    grid-area: main;
    grid-template-columns: repeat(3, 30%);
    grid-template-columns: repeat(auto-fit, 320px);
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    /*auto -fit 부모요소에 내가 알아서 맞출꺼야 이씹쌔야 가만놔둬*/
    justify-content: center;
    align-items: center;
    gap: 10px;
    /*
    repreat(n,크기) auto-fit 은 부모 요소 크기에 맞는 값 계산
    minmax(최솟값, 최댓값), 줄어들거나 더 늘어나지 않도록 설정이 가능
    */


    /**/
}

#main-container > .main-product-item {
    height: 200px;
    background-color: blueviolet;
}






footer {
    background-color: aliceblue;
    /* grid-column: 1 / 3; */
    grid-area: footer;
}

/*
가급적 정렬 요소는 플렉스로 구현하는것이 훨씬 편리 
하지만 바둑판의 형태나,UI의 순서가 바뀌어야하는 경우라면 grid 레이아웃

따라서 필요에 의하여 구현하는것이 가장 좋음


반드시 grid나 flex로 구현해야하는 경우는 없음 ]
다만 다소 편리할 뿐 

css가 익숙해질 떄까지 
그리드 레이아웃 사용 지양

보통 하나의 페이지를 여러분이 
큰 도움 없이, 완성 할수있을때 
(css가 익숙해져있을떄)

display:flex는 정렬을 위해 사용해도 괜찮
*/ 