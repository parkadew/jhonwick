1. 애자일

    (Agail) 애자일 - 날렵한, 민첩한
    시장반응에 따라 빠르고 민첩하게 프로덕트에 대응하는것

    프로그래밍에 있어서 애자일 방법론이란?

    스크럼(scrum)

    특정한 사이클(스프린트)를 반봅하며 하나의 프로젝트를 
    기획하고 리뷰하는것

    예를 들어) "치킨 할인 이벤트"라는 프로젝트를

    제품 백로그
    제품 백로그 개선(그루밍 회의)

    팀 단위 스프린트 기획( 백로그 - 스프린트 백로그)
    스프린트 진행을 위한 테스크 진행

    베포/다음 스프린트 진행할 수있는 데 그전에 꼭 해야하는 스프린트 회고


    1)개발자의 역량 부족
    2) 기획 및 디자인의 부재
    3) 버그나 에러 발생(엣지 케이스) --risk buffer -- poc(개념 증명)

    스프린트(sprint)
        제품 백로그가 나오면 스코프를 결정
        스코프에 따라 스프린트 백로그를 결정
        스프린트 백로그를 관리(칸반보드--할인 / 진행중 / 완료)
            ex) Jira, Linear, Notion ... 

        킨반보드 장점
            1) 테스크 일정에 대한 공유
            2) 블라킹 된 요소들의 진행 상태
            3) 백로그 - 방향성을 잃지 않게 해준다
                매년 12월
                    년 단위 목표를 구상해요
                    월 단위 목표를 구상해요
                    주간 단위 목표를 구상해
                    일 단위 목표를 시간으로 구상
                    -- 이중 60% 이루어도 성공
    애자일
        1.수평 구조가 많다
        2. 빠르게 시장 상황에 따라 대응
        3.리소스가 많이 든다. 문서화의 중요성

    폭포수
        1. 수직 구조가 많다
        2.고민하지않아도 된다.
        3. 프로젝트가 반응이 좋지 않으면 손실이 큼

2.flex
    flexible layout
        :유연하게 조작가능한 레이아웃

    flex는 유연하다라는 의미를 가지고 있으며,빈 공간을 채우거나 특정 요소를 수직 수평 정렬하고 방향이나 위치든 유연하게 
    배치할수있는 레이아웃

    ex) 모바일,데스크탑 화면에 따라 요소의 위치가 바뀔때 유연하게 대처하는것
    
    반드시 부모 요소에 
        dispaly:flex를 선언
        
        justify-contents : 자식 요소의 수평 정렬 방식 /
        / 왼쪽 정렬, 오른쪽 정렬, 가운데 정렬, 요소 사이 균등하게 벌어짐

        align - items: 자식 요소의 수직 정렬방식
        / 상단, 중단, 하단

        flex-direction : 방향을 설정 default는 수평이지만, 수직으로 세워서 flex 속성을 사용

        flex-wrap : flex된 요소들의 줄바꿈 여부 wrap, no-wrap

        gap : 각 요소들이 가지고 있는 여백의 크기를 조정할 수있음(margin)



*자식 요소에 줄수있는 속성들
    flex-basis : 정렬된 요소의 크기 (width)
    flex-grow : 정렬된 요소가 차지하는 비율입니다. 단, basis속성이 있다면 해당 값만큼 + 되기 떄문에 grow 속성이 있는 경우 basis를 쓰면 안된다.

    flex- shrink : 자식 요소가 부모 요소를 넘었을 떄 줄어드는 비율입니다               
                    display flex는 자동으로 부모요소를 넘지 못하게 요소의 크기를 줄입니다.
                    만약에 shrink를 0으로 설정하면 부모요소 크기를 넘을 수 있다.
        
    

3.grid
            








    

2.flex





3.grid