
git
    코드 버전 관리 시스템
    => 코드의 히스토리를 관리(보관)

    1. 히스토리 보관(버전관리)
        ----> 필요 없는 코드를 삭제 ---> 필요해짐 ---> 이전 코드 참고
        ----> 버전 관리의 필요성 -----> 버전 업데이트 후 롤백
        ---->  협업 시 팀원이 이해할 수 있는 코드의 최소화


    2. 팀원 간의 코드 공유
        -----> 모든 사람 (오픈 소스) ----- 개발 커뮤니티 

    3. 이슈 트래킹
    4. 리뷰를 통한 개발 문화와 엣지 케이스 발견

    -------------------------------------

    github
    https://github.com/

    git으로 관리된 코드를 웹사이트 에 공유하여 보다 편리하게 (원격 - 서버에 저장)
    코드를 관리하고 리뷰할 수 있는 시스템

    git
    https://git-scm.com/downloads\(로컬 하나의 컴퓨터에 저장)
    git --verstion

    내 컴퓨터에 설치해서 내 컴퓨터에서 코드를 관리 (로컬-저장소)

    -----------------------------------------------

     github-flow(git-flow)

        1.내가 코드를 올리고 싶은 패키지를 선택
            (올리고싶은 폴더!! ex)day04안에 폴더를 올리고싶으면 day04폴더를 올리면 됨)

        2.아무것도 저장이 되어있지 않을 때는 저장 공간 생성 (로컬 저장소)
            git init

        3.선택한 패키지에서 내가 저장하고 싶은 파일을 선택-->준비(스테이징)
            git add 파일명 (특정 파일)
            git add .(폴더 내 같은 경로에 있는 모든 파일)

        4. 로컬 저장소에 준비된 파일을 저장 (커밋)
            git commit - m "커밋 메세지(헤더)" -m "커밋 메세지(본문)" -m "커밋 메세지(각주)"
        
        5. 커밋 내역을 확인할 수 있음
                git log

        6. 원격 저장소 생성 -- 만약에 생성이 되어있다면 생략

        7.원격 저장소와 로컬 저장소를 연결 
            git remote add 원격저장소명(origin) 원격저장소-주소 https://github.com/parkadew/gitstudy2.git

        8.컨벤션에 대한 협의 --- 이니셜 라이즈 (기초 세팅을 git-hub에 올릴 준비)
            (규칙에 대한 협의)

           *폴더 구조
          index.html

          pages
            login.html 
            sign-up.html
          css
            reset.css
            commom.css
            login.css
        assets
            img
                ...
            font
                ...
            icon
                ...
            
        9. 로컬 저장소(컴퓨터)의 히스토리를 원격 저장소에 밀어넣기를 할 것
            git push 원격저장소명(origin) 브랜치명(main) -f

            ** 주의사항
                 너 로컬 저장소와 히스토리를 동기화 시켜야해!
                 원격 저장소의 코드를 다운 받아서 내 코드와 합쳐야합니다.

                 git pull origin main       

                 pull = 다운
                 push = 밀어넣기

                 git push origin main 하게 되면 내 코드를 밀어넣고 덮어씌움
                 -f 강제로 무엇을 한다// 주의


        10. 분기 - branch
        나뭇가지

            내가 분기를 생성할 브랜치로 이동(_dev, main)
            - git checkout 브랜치명

            브랜치를 생성 
            - git branch 브랜치명

            브랜치를 생성할떈 가장 최신의 코드에서 생성하는 것이 좋음
            - git pull ...

            브랜치를 생성하면서 이동
            - git checkout -b 브랜치명  

            브랜치 목록을 확인하는 명령어
            - git branch

            병합이 된 후에는 보관해야할 이유가 없다면 브랜치 삭제 
            - git branch - D 브랜치명

            ----------------------------------------------------

            1. 최초 커밋 -- 이니셜 템플릿                                                        최초생성자가 init 부터 push 까지가 역할
             git init - 로컬 저장소 생성 (최초 생성자가 이니셜 커밋을 하기위해 로컬 저장소를 생성해야한다)     git add . -> commit -> push           
             (init 하는 이유 내코드 내컴퓨터에 내가 저장하려고)          
             git add . ->      
             git commit -m "커밋 메세지"
             (add commit 까지 내코드 내텀퓨터에 저장)
             github 원격 저장소 생성
             git remote add origin 레포지토리 - 주소
              (remote 원격저장소랑 연결 시켜주는거)
             * README.md 가 있으면 history가 달라서 에러 발생      (REDME.md가 있으면 에러가 발생한다 있을때는 두개의 history를 합쳐줘야하니까 --rebase 명령어를 통해서 기록없이 머지를 하는것)
                            |
                            v
             * git pull origin main --rebase           *rebase를 통해 동기화 진행후 push
             * 동기화
             git checkout main
             git push origin main
             git commit 

            2. 팀원 참여
                git clone 레퍼지토리-주소       이니셜라이즈가 완성된후 클론을 팀원들은 clone을 받아 참여하면 된다!             

                --------

                git init -> git remote   클론을 받고 싶지않다 다르게 하고싶다! git init 을 하고 remote를 통해 연결을 한후 deport branch로 이동을 할수있다
                git checkout main
                git pull origin main

            3. 협업 관리

                git checkout dev (시작점)        
                git pull origin dev (동기화)   
                git checkout -b feat/login  (브랜치를 생성하면서 이동한다)

                ... 개발

                git add.
                git commit -m "커밋 메세지'
                git push origin feat/login

            github  
                git push origin feat/login
                feat/login 시작점
                갓허브 홈페이지에 PR(Pull Request)생성
                승인이 있어야만 코드 병합 가능 (리뷰)
                병합을 해야합니다 -> 버튼을 누르면 병합이 가능 
                충돌 상황이 발생할 경우 버튼이 비활성화
                (충돌 후 비활성화 되면 머지를 해야한다)

                git checkout dev
                git pull origin dev (dev 최신화) -- 다른 사람코드가 병합
                git checkout feat/login
                git merge dev

                vscode 내에서 병합이 되었음을 알려주고 병합이 완료되면 버튼이 다시 활성화됨
                ---> PR로 이동해서 병합 버튼 눌러주면 병합이 완료 
                >>>> git checkout 


                Request
                question
                opinion



            -----------------------------------------------------


              개인 레포지토리에 코드를 공유

              (최초) 폴더에 아무것도 없으면 빈폴더는 올라가지 않는다
                    따라서 .gitkeep 파일을 이용하여 폴더 구조를 이니셜라이즈 할수있다
              git init    (생성)
              git remote   (연결)

              -------------

              (개발마다)
              git add
              git commit
              git push

              -----------------------------------------------------

              터미널에서 폴더를 이동하는 명령어 
                cd 
                cd 폴더명(현재 경로에 있는 폴더로 이동가능 )
                cd .. (상위 폴더)
                cd 절대경로 (경로 복사하여 붙여넣기 *맥쓸떄 경로 이상할떄 사용)

                --------------------------------------------------

                컴퓨터 환경 설정에 본인의 깃허브 이메일과 닉네임을 등록

                git config --global user.email 깃허브 이메일 주소
                git config --global user.name 깃허브 닉네임

                git config --list
                enter 누르면 다음줄 + 확인 되었으면 q 누르고 종료

                ---------------------------------------------------

                    git remote add origin
                    git remote

                    git add .
                    git commit -m 'init'

                    git checkout -b main
                    git push origin main

                    git pull origin main --allow-unrelated-histories
                    git pull origin main --rebase

                    git push origin main
                -----------------------------------------------------











        
        






    










